var search_data = {"index":{"searchIndex":["activerecord","connectionadapters","mysql","columnmethods","bytesize","activerecordtype","file","iecbytesize","numeric","pathname","%()","*()","**()","+()","+@()","-()","-@()","/()","<()","<=()","<=>()","==()","===()",">()",">=()","bytes()","bytes()","bytes()","bytesize()","bytesize()","bytesize()","bytesize()","bytesize?()","bytesize?()","cast()","deserialize()","eb()","eb()","eib()","eib()","eql?()","gb()","gb()","gib()","gib()","iecbytesize()","iecbytesize()","iecbytesize()","iecbytesize?()","iecbytesize?()","inspect()","kb()","kb()","kib()","kib()","mb()","mb()","mib()","mib()","negative?()","new()","parse()","pb()","pb()","pib()","pib()","positive?()","serialize()","tb()","tb()","tib()","tib()","to_bytes()","to_eb()","to_eib()","to_gb()","to_gib()","to_i()","to_iec()","to_kb()","to_kib()","to_mb()","to_mib()","to_pb()","to_pib()","to_s()","to_si()","to_tb()","to_tib()","to_yb()","to_yib()","to_zb()","to_zib()","yb()","yb()","yib()","yib()","zb()","zb()","zero?()","zib()","zib()","gemfile","gemfile.lock","license","readme","rakefile","bytesize.gemspec"],"longSearchIndex":["activerecord","activerecord::connectionadapters","activerecord::connectionadapters::mysql","activerecord::connectionadapters::mysql::columnmethods","bytesize","bytesize::activerecordtype","file","iecbytesize","numeric","pathname","bytesize#%()","bytesize#*()","bytesize#**()","bytesize#+()","bytesize#+@()","bytesize#-()","bytesize#-@()","bytesize#/()","bytesize#<()","bytesize#<=()","bytesize#<=>()","bytesize#==()","bytesize#===()","bytesize#>()","bytesize#>=()","bytesize#bytes()","bytesize::bytes()","numeric#bytes()","activerecord::connectionadapters::mysql::columnmethods#bytesize()","file#bytesize()","file::bytesize()","pathname#bytesize()","file::bytesize?()","pathname#bytesize?()","bytesize::activerecordtype#cast()","bytesize::activerecordtype#deserialize()","bytesize::eb()","numeric#eb()","bytesize::eib()","numeric#eib()","bytesize#eql?()","bytesize::gb()","numeric#gb()","bytesize::gib()","numeric#gib()","file::iecbytesize()","file#iecbytesize()","pathname#iecbytesize()","file::iecbytesize?()","pathname#iecbytesize?()","bytesize#inspect()","bytesize::kb()","numeric#kb()","bytesize::kib()","numeric#kib()","bytesize::mb()","numeric#mb()","bytesize::mib()","numeric#mib()","bytesize#negative?()","bytesize::new()","bytesize::parse()","bytesize::pb()","numeric#pb()","bytesize::pib()","numeric#pib()","bytesize#positive?()","bytesize::activerecordtype#serialize()","bytesize::tb()","numeric#tb()","bytesize::tib()","numeric#tib()","bytesize#to_bytes()","bytesize#to_eb()","bytesize#to_eib()","bytesize#to_gb()","bytesize#to_gib()","bytesize#to_i()","bytesize#to_iec()","bytesize#to_kb()","bytesize#to_kib()","bytesize#to_mb()","bytesize#to_mib()","bytesize#to_pb()","bytesize#to_pib()","bytesize#to_s()","bytesize#to_si()","bytesize#to_tb()","bytesize#to_tib()","bytesize#to_yb()","bytesize#to_yib()","bytesize#to_zb()","bytesize#to_zib()","bytesize::yb()","numeric#yb()","bytesize::yib()","numeric#yib()","bytesize::zb()","numeric#zb()","bytesize#zero?()","bytesize::zib()","numeric#zib()","","","","","",""],"info":[["ActiveRecord","","ActiveRecord.html","",""],["ActiveRecord::ConnectionAdapters","","ActiveRecord/ConnectionAdapters.html","",""],["ActiveRecord::ConnectionAdapters::MySQL","","ActiveRecord/ConnectionAdapters/MySQL.html","",""],["ActiveRecord::ConnectionAdapters::MySQL::ColumnMethods","","ActiveRecord/ConnectionAdapters/MySQL/ColumnMethods.html","",""],["ByteSize","","ByteSize.html","","<p>This class is used to represent a size in bytes.\n<p>It uses the SI standard unit symbols: kB, MB, GB, TB …\n"],["ByteSize::ActiveRecordType","","ByteSize/ActiveRecordType.html","",""],["File","","File.html","","<p>ByteSize adds three new methods to the File class:\n<p><em> ::bytesize</em>\n<p><em> ::bytesize?</em>\n"],["IECByteSize","","IECByteSize.html","","<p>This class is identical to <em>ByteSize</em> except that all formatted\noutput uses the IEC standard unit symbols: …\n"],["Numeric","","Numeric.html","","<p>Requiring <code>bytesize/units</code> adds convenience methods to Numeric\nfor easy creation of ByteSize and IECByteSize …\n"],["Pathname","","Pathname.html","","<p>ByteSize adds two new methods to the Pathname class:\n<p><em> #bytesize</em>\n<p><em> #bytesize?</em>\n"],["%","ByteSize","ByteSize.html#method-i-25","( val )","<p>Performs a modulo operation with <em>val</em>, returning an instance of\nByteSize.\n<p><em>val</em> can be another ByteSize or …\n"],["*","ByteSize","ByteSize.html#method-i-2A","( val )","<p>Performs multiplication, returning an instance of ByteSize.\n<p><em>val</em> must be a Numeric. Multiplication with …\n"],["**","ByteSize","ByteSize.html#method-i-2A-2A","( pow )","<p>Raises <em>bytesize</em> to the power of <em>pow</em>, returning an\ninstance of ByteSize.\n<p><em>pow</em> must be a Numeric. Raising …\n"],["+","ByteSize","ByteSize.html#method-i-2B","( val )","<p>Performs addition, returning an instance of ByteSize.\n<p><em>val</em> can be another ByteSize or a Numeric.\n"],["+@","ByteSize","ByteSize.html#method-i-2B-40","()","<p>Unary Plus — Returns the receiver’s value.\n"],["-","ByteSize","ByteSize.html#method-i-2D","( val )","<p>Performs subtraction, returning an instance of ByteSize.\n<p><em>val</em> can be another ByteSize or a Numeric.\n"],["-@","ByteSize","ByteSize.html#method-i-2D-40","()","<p>Unary Minus — Returns the receiver’s value, negated.\n"],["/","ByteSize","ByteSize.html#method-i-2F","( val )","<p>Performs division.\n<p>If <em>val</em> is a Numeric it returns an instance of ByteSize. If\n<em>val</em> is an instance of ByteSize …\n"],["<","ByteSize","ByteSize.html#method-i-3C","( other )","<p>Returns <code>true</code> if the value of <em>bytesize</em> is less than\nthat of <em>val</em>.\n"],["<=","ByteSize","ByteSize.html#method-i-3C-3D","( other )","<p>Returns <code>true</code> if the value of <em>bytesize</em> is less than or\nequal to that of <em>val</em>.\n"],["<=>","ByteSize","ByteSize.html#method-i-3C-3D-3E","( other )","<p>Compares <em>bytesize</em> to <em>other</em> and returns <code>0</code> if\nthey are equal, <code>-1</code> if <em>bytesize</em> is less than\n<em>other</em>, or <code>1</code> if …\n"],["==","ByteSize","ByteSize.html#method-i-3D-3D","( other )","<p>Returns <code>true</code> if <em>bytesize</em> is equal to <em>other</em>.\n<p>If <em>other</em> is not an instance of ByteSize an attempt will be …\n"],["===","ByteSize","ByteSize.html#method-i-3D-3D-3D","","<p>Alias for<em> ==</em>.\n"],[">","ByteSize","ByteSize.html#method-i-3E","( other )","<p>Returns <code>true</code> if the value of <em>bytesize</em> is greater than\nthat of <em>val</em>.\n"],[">=","ByteSize","ByteSize.html#method-i-3E-3D","( other )","<p>Returns <code>true</code> if the value of <em>bytesize</em> is greater than\nor equal to that of <em>val</em>.\n"],["bytes","ByteSize","ByteSize.html#method-i-bytes","","<p>Returns the number of bytes as an Integer.\n"],["bytes","ByteSize","ByteSize.html#method-c-bytes","( b )","<p>Returns a new instance of ByteSize representing <em>n</em> bytes.\n"],["bytes","Numeric","Numeric.html#method-i-bytes","","<p>Returns a new instance of ByteSize representing <em>self</em> number of\nbytes.\n"],["bytesize","ActiveRecord::ConnectionAdapters::MySQL::ColumnMethods","ActiveRecord/ConnectionAdapters/MySQL/ColumnMethods.html#method-i-bytesize","( *args, **options )",""],["bytesize","File","File.html#method-i-bytesize","()","<p>Identical to<em> File#size</em> except that the value is returned as an\ninstance of ByteSize.\n"],["bytesize","File","File.html#method-c-bytesize","( file_name )","<p>Identical to<em> File.size</em> except that the value is returned as an\ninstance of ByteSize.\n"],["bytesize","Pathname","Pathname.html#method-i-bytesize","()","<p>Identical to<em> Pathname#size</em> except that the value is returned as an\ninstance of ByteSize.\n"],["bytesize?","File","File.html#method-c-bytesize-3F","( file_name )","<p>Identical to<em> File.size?</em> except that the value is returned as an\ninstance of ByteSize.\n"],["bytesize?","Pathname","Pathname.html#method-i-bytesize-3F","()","<p>Identical to<em> Pathname#size?</em> except that the value is returned as\nan instance of ByteSize.\n"],["cast","ByteSize::ActiveRecordType","ByteSize/ActiveRecordType.html#method-i-cast","( value )",""],["deserialize","ByteSize::ActiveRecordType","ByteSize/ActiveRecordType.html#method-i-deserialize","( value )",""],["eb","ByteSize","ByteSize.html#method-c-eb","","<p>Returns a new instance of ByteSize representing <em>n</em> exabytes.\n"],["eb","Numeric","Numeric.html#method-i-eb","","<p>Returns a new instance of ByteSize representing <em>self</em> number of\nexabytes.\n"],["eib","ByteSize","ByteSize.html#method-c-eib","","<p>Returns a new instance of ByteSize representing <em>n</em> exbibytes.\n"],["eib","Numeric","Numeric.html#method-i-eib","","<p>Returns a new instance of IECByteSize representing <em>self</em> number of\nexbibytes.\n"],["eql?","ByteSize","ByteSize.html#method-i-eql-3F","( other )","<p>Returns <code>true</code> if the ByteSize is equal to\n<em>other_bytesize</em>.\n"],["gb","ByteSize","ByteSize.html#method-c-gb","","<p>Returns a new instance of ByteSize representing <em>n</em> gigabytes.\n"],["gb","Numeric","Numeric.html#method-i-gb","","<p>Returns a new instance of ByteSize representing <em>self</em> number of\ngigabytes.\n"],["gib","ByteSize","ByteSize.html#method-c-gib","","<p>Returns a new instance of ByteSize representing <em>n</em> gibibytes.\n"],["gib","Numeric","Numeric.html#method-i-gib","","<p>Returns a new instance of IECByteSize representing <em>self</em> number of\ngibibytes.\n"],["iecbytesize","File","File.html#method-c-iecbytesize","( file_name )","<p>Identical to<em> File.size</em> except that the value is returned as an\ninstance of IECByteSize.\n"],["iecbytesize","File","File.html#method-i-iecbytesize","()","<p>Identical to<em> File#size</em> except that the value is returned as an\ninstance of IECByteSize.\n"],["iecbytesize","Pathname","Pathname.html#method-i-iecbytesize","()","<p>Identical to<em> Pathname#size</em> except that the value is returned as an\ninstance of IECByteSize.\n"],["iecbytesize?","File","File.html#method-c-iecbytesize-3F","( file_name )","<p>Identical to<em> File.size?</em> except that the value is returned as an\ninstance of IECByteSize.\n"],["iecbytesize?","Pathname","Pathname.html#method-i-iecbytesize-3F","()","<p>Identical to<em> Pathname#size?</em> except that the value is returned as\nan instance of IECByteSize.\n"],["inspect","ByteSize","ByteSize.html#method-i-inspect","()","<p>Return a String describing this object.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">ByteSize</span>.<span class=\"ruby-identifier\">bytes</span>(<span class=\"ruby-value\">3000000000000</span>)  <span class=\"ruby-comment\">#=&gt; (3 TB)</span>\n</pre>\n"],["kb","ByteSize","ByteSize.html#method-c-kb","","<p>Returns a new instance of ByteSize representing <em>n</em> kilobytes.\n"],["kb","Numeric","Numeric.html#method-i-kb","","<p>Returns a new instance of ByteSize representing <em>self</em> number of\nkilobytes.\n"],["kib","ByteSize","ByteSize.html#method-c-kib","","<p>Returns a new instance of ByteSize representing <em>n</em> kibibytes.\n"],["kib","Numeric","Numeric.html#method-i-kib","","<p>Returns a new instance of IECByteSize representing <em>self</em> number of\nkibibytes.\n"],["mb","ByteSize","ByteSize.html#method-c-mb","","<p>Returns a new instance of ByteSize representing <em>n</em> megabytes.\n"],["mb","Numeric","Numeric.html#method-i-mb","","<p>Returns a new instance of ByteSize representing <em>self</em> number of\nmegabytes.\n"],["mib","ByteSize","ByteSize.html#method-c-mib","","<p>Returns a new instance of ByteSize representing <em>n</em> mebibytes.\n"],["mib","Numeric","Numeric.html#method-i-mib","","<p>Returns a new instance of IECByteSize representing <em>self</em> number of\nmebibytes.\n"],["negative?","ByteSize","ByteSize.html#method-i-negative-3F","()","<p>Returns <code>true</code> if the ByteSize is less than <code>0</code>.\n"],["new","ByteSize","ByteSize.html#method-c-new","( bytes )","<p>Create a new instance of ByteSize from an Integer or String.\n"],["parse","ByteSize","ByteSize.html#method-c-parse","( val )","<p>Parses a String into either a ByteSize or IECByteSize depending on it&#39;s\nunit symbol.\n"],["pb","ByteSize","ByteSize.html#method-c-pb","","<p>Returns a new instance of ByteSize representing <em>n</em> petabytes.\n"],["pb","Numeric","Numeric.html#method-i-pb","","<p>Returns a new instance of ByteSize representing <em>self</em> number of\npetabytes.\n"],["pib","ByteSize","ByteSize.html#method-c-pib","","<p>Returns a new instance of ByteSize representing <em>n</em> pebibytes.\n"],["pib","Numeric","Numeric.html#method-i-pib","","<p>Returns a new instance of IECByteSize representing <em>self</em> number of\npebibytes.\n"],["positive?","ByteSize","ByteSize.html#method-i-positive-3F","()","<p>Returns <code>true</code> if the ByteSize is greater than <code>0</code>.\n"],["serialize","ByteSize::ActiveRecordType","ByteSize/ActiveRecordType.html#method-i-serialize","( value )",""],["tb","ByteSize","ByteSize.html#method-c-tb","","<p>Returns a new instance of ByteSize representing <em>n</em> terabytes.\n"],["tb","Numeric","Numeric.html#method-i-tb","","<p>Returns a new instance of ByteSize representing <em>self</em> number of\nterabytes.\n"],["tib","ByteSize","ByteSize.html#method-c-tib","","<p>Returns a new instance of ByteSize representing <em>n</em> tebibytes.\n"],["tib","Numeric","Numeric.html#method-i-tib","","<p>Returns a new instance of IECByteSize representing <em>self</em> number of\ntebibytes.\n"],["to_bytes","ByteSize","ByteSize.html#method-i-to_bytes","","<p>Alias for<em> #bytes</em>.\n"],["to_eb","ByteSize","ByteSize.html#method-i-to_eb","","<p>Returns a Float representing the equivalent number of exabytes.\n"],["to_eib","ByteSize","ByteSize.html#method-i-to_eib","","<p>Returns a Float representing the equivalent number of exbibytes.\n"],["to_gb","ByteSize","ByteSize.html#method-i-to_gb","","<p>Returns a Float representing the equivalent number of gigabytes.\n"],["to_gib","ByteSize","ByteSize.html#method-i-to_gib","","<p>Returns a Float representing the equivalent number of gibibytes.\n"],["to_i","ByteSize","ByteSize.html#method-i-to_i","()","<p>Returns the number of bytes as an Integer.\n"],["to_iec","ByteSize","ByteSize.html#method-i-to_iec","()","<p>Returns the size as an instance of IECByteSize.\n<p>If called on an instance of IECByteSize it returns <code>self</code> …\n"],["to_kb","ByteSize","ByteSize.html#method-i-to_kb","","<p>Returns a Float representing the equivalent number of kilobytes.\n"],["to_kib","ByteSize","ByteSize.html#method-i-to_kib","","<p>Returns a Float representing the equivalent number of kibibytes.\n"],["to_mb","ByteSize","ByteSize.html#method-i-to_mb","","<p>Returns a Float representing the equivalent number of megabytes.\n"],["to_mib","ByteSize","ByteSize.html#method-i-to_mib","","<p>Returns a Float representing the equivalent number of mebibytes.\n"],["to_pb","ByteSize","ByteSize.html#method-i-to_pb","","<p>Returns a Float representing the equivalent number of petabytes.\n"],["to_pib","ByteSize","ByteSize.html#method-i-to_pib","","<p>Returns a Float representing the equivalent number of pebibytes.\n"],["to_s","ByteSize","ByteSize.html#method-i-to_s","( decimal_places=nil )","<p>Format this ByteSize as a String.\n<p>The second form formats it with exactly <em>decimal_places</em> decimal\nplaces. …\n"],["to_si","ByteSize","ByteSize.html#method-i-to_si","()","<p>Returns the size as an instance of ByteSize.\n<p>If called on an instance of ByteSize it returns <code>self</code>.\n"],["to_tb","ByteSize","ByteSize.html#method-i-to_tb","","<p>Returns a Float representing the equivalent number of terabytes.\n"],["to_tib","ByteSize","ByteSize.html#method-i-to_tib","","<p>Returns a Float representing the equivalent number of tebibytes.\n"],["to_yb","ByteSize","ByteSize.html#method-i-to_yb","","<p>Returns a Float representing the equivalent number of yottabytes.\n"],["to_yib","ByteSize","ByteSize.html#method-i-to_yib","","<p>Returns a Float representing the equivalent number of yobibytes.\n"],["to_zb","ByteSize","ByteSize.html#method-i-to_zb","","<p>Returns a Float representing the equivalent number of zettabytes.\n"],["to_zib","ByteSize","ByteSize.html#method-i-to_zib","","<p>Returns a Float representing the equivalent number of zebibytes.\n"],["yb","ByteSize","ByteSize.html#method-c-yb","","<p>Returns a new instance of ByteSize representing <em>n</em> yottabytes.\n"],["yb","Numeric","Numeric.html#method-i-yb","","<p>Returns a new instance of ByteSize representing <em>self</em> number of\nyottabytes.\n"],["yib","ByteSize","ByteSize.html#method-c-yib","","<p>Returns a new instance of ByteSize representing <em>n</em> yobibytes.\n"],["yib","Numeric","Numeric.html#method-i-yib","","<p>Returns a new instance of IECByteSize representing <em>self</em> number of\nyobibytes.\n"],["zb","ByteSize","ByteSize.html#method-c-zb","","<p>Returns a new instance of ByteSize representing <em>n</em> zettabytes.\n"],["zb","Numeric","Numeric.html#method-i-zb","","<p>Returns a new instance of ByteSize representing <em>self</em> number of\nzettabytes.\n"],["zero?","ByteSize","ByteSize.html#method-i-zero-3F","()","<p>Returns <code>true</code> if the ByteSize has a zero value.\n"],["zib","ByteSize","ByteSize.html#method-c-zib","","<p>Returns a new instance of ByteSize representing <em>n</em> zebibytes.\n"],["zib","Numeric","Numeric.html#method-i-zib","","<p>Returns a new instance of IECByteSize representing <em>self</em> number of\nzebibytes.\n"],["Gemfile","","Gemfile.html","","<p>source “rubygems.org”\n<p>git_source(:github) {|repo_name| “github.com/#{repo_name}” } …\n"],["Gemfile.lock","","Gemfile_lock.html","","<p>PATH\n\n<pre>remote: .\nspecs:\n  bytesize (0.1.0)</pre>\n<p>GEM\n"],["LICENSE","","LICENSE_txt.html","","<p>The MIT License (MIT)\n<p>Copyright © 2018 Adam Hunt\n<p>Permission is hereby granted, free of charge, to any person …\n"],["README","","README_md.html","","<p>ByteSize\n<p>ByteSize is a simple Ruby object that stores a size in bytes, while\nproviding human-readable …\n"],["Rakefile","","Rakefile.html","","<p>require “bundler/gem_tasks” require “rspec/core/rake_task”\n<p>RSpec::Core::RakeTask.new …\n"],["bytesize.gemspec","","bytesize_gemspec.html","","<p>#!/usr/bin/env ruby -w # -*- encoding: utf-8 -*- # # ByteSize # #\nbytesize.gemspec # # © 2018 Adam Hunt …\n"]]}}